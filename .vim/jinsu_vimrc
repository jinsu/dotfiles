" vim:foldmethod=marker:foldlevel=0

" Colors {{{
set t_Co=256
set background=dark
colorscheme desert
" }}}

" Misc Vim Config {{{
syntax on " enable syntax processing
set autoindent " indent to the previous line's indentation on newline
set title " Show filename in the window titlebar
set wildmenu " visual autocomplete for command menu
set encoding=utf-8
set backspace=indent,eol,start "backspace through newlines
set clipboard=unnamed " let osx access system clipboard

silent !mkdir -p ~/.vim/tmp/swap > /dev/null 2>&1
silent !mkdir -p ~/.vim/tmp/backup > /dev/null 2>&1
silent !mkdir -p ~/.vim/tmp/undo > /dev/null 2>&1
set directory=~/.vim/tmp/swap// " set swap directory. two slashes at the end ensures complete file path to avoid name collision.
set backupdir=~/.vim/tmp/backup// " set backup directory.
set undodir=~/.vim/tmp/undo// " set undo directory
set mouse=nicr " set mouse scrolling works for iTerm2"
" autocmd BufEnter * lcd %:p:h " sets working dir to current dir
" }}}

" Spaces & Tabs {{{
set tabstop=2 " number of visual spaces per TAB
set softtabstop=2 " number of spaces in tab when editing
set shiftwidth=2  " number of spaces when re-indenting
set expandtab " tabs are spaces
" }}}

" search {{{
set incsearch " show matching search as you type
set hlsearch " highlight matches
set ignorecase " combine with smartcase for smarter ignore case
set smartcase " case-sensitive if all lowercase, case-insensitive if contains uppercase
" }}}

" UI Layout {{{
set number " show line numbers
set showcmd " show command in bottom bar
set cursorline " hightlight current line
set lazyredraw " redraw only when we need to.
set showmatch " highlight matching [{()}]
set colorcolumn=100 " highlight text beyond 100 chars
set ttyfast " indicates a fast terminal connection, faster redraw
set nowrap " no line breaking
set laststatus=2
" }}}

" Folding {{{
set foldenable " enable folding
set foldlevelstart=10 " open fold level to 10 by default
set foldnestmax=10 " 10 nested fold max
set foldmethod=indent "fold based on indent level
" }}}

" Filetype {{{
filetype plugin indent on " load filetype-specific files
" }}}

" Python {{{
au BufNewFile,BufRead *.py
  \ set tabstop=4 |
  \ set softtabstop=4 |
  \ set shiftwidth=4 |
  \ set expandtab |
  \ set autoindent |
  \ set fileformat=unix
let python_highlight_all=1

au FileType python map <silent> <leader>b oimport pdb; pdb.set_trace()<esc>
au FileType python map <silent> <leader>B Oimport pdb; pdb.set_trace()<esc>

"python with virtualenv support
" py << EOF
" import os
" import sys
" if 'VIRTUAL_ENV' in os.environ:
"   project_base_dir = os.environ['VIRTUAL_ENV']
"   activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"   execfile(activate_this, dict(__file__=activate_this))
" EOF

" py3 << EOF
" import os, sys, pathlib
" if 'VIRTUAL_ENV' in os.environ:
"   venv = os.getenv('VIRTUAL_ENV')
"   site_packages = next(pathlib.Path(venv,
"   'lib').glob('python*/site-packages'), None)
"   if site_packages:
"     sys.path.insert(0, str(site_packages))
" EOF

" }}}

" 2 tabstop js, html, css, scss, ruby, erb, yml files {{{
au BufNewFile,BufRead *.js,*.html,*.css,*.scss,*.yml,*.rb,*erb,*yml
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2
" }}}

" 4 tabstop ts {{{
au BufNewFile,BufRead *.ts
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4
" }}}

" dp file scheme syntax {{{
au BufNewFile,BufRead *.dp
    \ set syntax=scheme
" }}}

" vimrc {{{
autocmd bufwritepost .vimrc source $MYVIMRC
" }}}


" Leader Shortcuts {{{
let mapleader="," "leader is comma

" turn off search highlight to ,<space>
nnoremap <leader><space> :nohlsearch<CR>

" space open/closes folds
" nnoremap <space> za

" toggle gundo
nnoremap <leader>u :GundoToggle<CR>

" save vim session
nnoremap <leader>s :mksession! ~/.vim/.vim_session<CR>
" load vim session
nnoremap <leader>w :source ~/.vim/.vim_session<CR>

" window navigation
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l
nnoremap <C-h> <C-W>h

vnoremap <C-i> :call yapf#YAPF()<cr>

" }}}

" Plugins {{{
call plug#begin('~/.vim/plugged')

Plug 'vim-airline/vim-airline'
Plug 'junegunn/seoul256.vim'
Plug 'tpope/vim-fugitive'
Plug 'scrooloose/nerdtree'
Plug 'junegunn/rainbow_parentheses.vim'
" Plug 'andymass/vim-matchup'

" Plug 'scrooloose/syntastic'
Plug 'ntpeters/vim-better-whitespace'
Plug 'vim-scripts/indentpython.vim', { 'for': ['python'] }
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
" Plug 'davidhalter/jedi-vim', { 'for': ['python'] }
" Plug 'fisadev/vim-isort', { 'for': ['python'] }
Plug 'pangloss/vim-javascript', { 'for': ['javascript', 'javascript.jsx'] }
Plug 'leafgarland/typescript-vim', { 'for': ['typescript'] }
Plug 'Quramy/tsuquyomi', { 'for': ['typescript'] }
" Plug 'w0rp/ale'

" Plug 'artur-shaik/vim-javacomplete2', {'for': 'java'} " Load only for java files
Plug 'majutsushi/tagbar', {'for': 'java'}


call plug#end()
" }}}

" Plugin Enhancements {{{

" seoul colors {{{
" seoul256 (dark):
" "   Range:   233 (darkest) ~ 239 (lightest)
" "   Default: 237

let g:seoul256_background = 235
colorscheme seoul256
" }}}

" better-whitespace {{{
nnoremap <leader>w :StripWhitespace<CR>
" }}}

" nerdtree {{{
  " open up nerd tree with ,n with current dir as the working dir ( % symbol)
  nnoremap <leader>e :NERDTreeToggle %<CR>
  nnoremap <leader>f :NERDTreeFind<CR>

  let NERDTreeIgnore=['\.pyc$', '\~$'] " ignore files in NERDTree
"}}}

" syntastic {{{
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
"
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_loc_list_height = 5
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_aggregate_errors = 1 " aggregate all errors to one list
" let g:syntastic_javascript_checkers = ['eslint']
" let g:syntastic_python_checkers = ['python', 'flake8']
" let g:syntastic_html_tidy_ignore_errors = ['proprietary attribute "ng-']
" }}}

" airline {{{
set laststatus=2
" }}}

" fugitive {{{
set statusline=%{fugitive#statusline()}
" }}}

" ctrlp {{{
" let g:ctrlp_custom_ignore = {
"     \ 'dir':  '\.(git|hg|svn)$\|coverage-report\|node_modules',
"     \ 'file': '\.(pyc|exe|so|dat)$'
"     \ }
"}}}

" isort python {{{
let g:vim_isort_map = '<C-o>'
let g:vim_isort_python_version = 'python3'
" }}}

" jedi-vim python {{{
let g:jedi#auto_vim_configuration = 0
set completeopt=menuone
" }}}

" fzf {{{
nnoremap <leader>t :FZF<CR>
" }}}

" javacomplete {{{
autocmd FileType java setlocal omnifunc=javacomplete#Complete
autocmd FileType java JCEnable
" }}}

" ale config {{{
" Shorten error/warning flags
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
" I have some custom icons for errors and warnings but feel free to change them.
let g:ale_sign_error = '✘✘'
let g:ale_sign_warning = '⚠⚠'

" Disable or enable loclist at the bottom of vim
" Comes down to personal preferance.
let g:ale_open_list = 0
let g:ale_loclist = 0


" Setup compilers for languages

let g:ale_linters = {
      \  'cs':['syntax', 'semantic', 'issues'],
      \  'python': ['pylint'],
      \  'java': ['javac']
      \ }
" }}}

" tagbar {{{
" Ctrl-b to open tagbar
map <C-b> :TagbarToggle<CR>
" }}}
